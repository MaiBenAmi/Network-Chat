import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.UUID;

public class Server implements Runnable {
	private int port;
	private DatagramSocket socket;
	private Thread run, manage, send, receive;
	private boolean running = false;
	private List<ServerClient> clients = new ArrayList<ServerClient>();
	private List<Integer> clientResponse = new ArrayList<Integer>();
	private final int MAX_ATTEMPTS = 5;
	private boolean raw = false;
	
	public Server(int port) {
		this.port = port;
		try {
			this.socket = new DatagramSocket(port);
		} catch (SocketException e) {
			e.printStackTrace();
			return;
		}
		run = new Thread(this, "Server");
		run.start();

	}

	@Override
	public void run() {
		running = true;
		System.out.println("Server started on port: " + port);
		ManageClients();
		Receive();
		
		Scanner scanner = new Scanner(System.in);
		while(running){
			String text = scanner.nextLine();
			if(!text.startsWith("/")){
				SendToAll("/m/Server: " + text + "/e/");
				continue;
			}
			text = text.substring(1);
			if(text.equals("raw")){
				raw = !raw;
			}
			else if(text.equals("clients")){
				System.out.println("Clients:");
				for(int i = 0; i < clients.size(); i++){
					ServerClient c = clients.get(i);
					System.out.println(c.name + "(" + c.getID() + "):" + c.address.toString() + ":" + c.port);
				}
			}
		}
	}

	private void ManageClients() {
		this.manage = new Thread("Manage") {
			public void run() {
				while (running) {
					SendToAll("/i/server");
					try {
						Thread.sleep(2000);
					} 
					catch (InterruptedException e) {
						e.printStackTrace();
					}
					for (int i = 0; i < clients.size(); i++) {
						ServerClient c = clients.get(i);
						if (!clientResponse.contains(clients.get(i).getID())) {
							if (c.attempt >= MAX_ATTEMPTS) {
								Disconnect(c.getID(), false);
							} else {
								c.attempt++;
							}
						} else {
							clientResponse.remove(new Integer(c.getID()));
							c.attempt = 0;
						}
					}
				}

			}
		};
		manage.start();
	}

	private void Receive() {
		this.receive = new Thread("Receive") {
			public void run() {
				while (running) {
					byte[] data = new byte[1024];
					DatagramPacket packet = new DatagramPacket(data, data.length);
					try {
						socket.receive(packet);
					} catch (IOException e) {
						e.printStackTrace();
					}
					String str = new String(packet.getData());
					Process(packet);
				}
			}
		};
		receive.start();
	}

	private void Process(DatagramPacket packet) {
		String str = new String(packet.getData());
		if(raw){
			System.out.println(str);
		}
		if (str.startsWith("/c/")) {
			int id = UniqueIdentifier.GetIdentifier();
			System.out.println("Identifier: " + id);
			clients.add(new ServerClient(str.substring(3, str.length()), packet.getAddress(), packet.getPort(), id));
			String ID = "/c/" + id;
			Send(ID, packet.getAddress(), packet.getPort());
		} else if (str.startsWith("/m/")) {
			String msg = str;// .substring(3, str.length());
			SendToAll(msg);
		} else if (str.startsWith("/d/")) {
			String id = str.split("/d/|/e/")[1];
			Disconnect(Integer.parseInt(id), true);
		} else if (str.startsWith("/i/")) {
			clientResponse.add(Integer.parseInt(str.split("/i/|/e/")[1]));
		} else {

		}
	}

	private void Disconnect(int id, boolean status) { // true = close by hitting
														// 'x', false by crash
														// or force shut down
		ServerClient c = null;
		for (int i = 0; i < clients.size(); i++) {
			if (clients.get(i).getID() == id) {
				c = clients.get(i);
				clients.remove(i);
				break;
			}
		}
		String message = "";
		StringBuilder sb = new StringBuilder(100);
		sb.append("Client " + c.name  + " (" + c.getID() + ") @ " + c.address.toString() + ":" + c.port);
		if (status) {

			message = "Client " + c.name  + " (" + c.getID() + ") @ " + c.address.toString() + ":" + c.port + " disconnected.";

			//sb.append(" disconnected");
			
		} else {
			message = "Client " + c.name + " (" + c.getID() + ") @ " + c.address.toString() + ":" + c.port + " timed-out.";
			//sb.append(" timed out");
		}
		System.out.println(message);
	}

	private void SendToAll(String message) {
		if(message.startsWith("/m/")){
			String text = message.substring(3);
			text = text.split("/e/")[0];
			System.out.println(message);
		}
		for (int i = 0; i < clients.size(); i++) {
			ServerClient client = clients.get(i);
			Send(message.getBytes(), client.address, client.port);
		}
	}

	private void Send(byte[] data, InetAddress address, int port) {
		send = new Thread("Send") {
			public void run() {
				DatagramPacket packet = new DatagramPacket(data, data.length, address, port);
				try {
					socket.send(packet);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		};
		send.start();
	}

	private void Send(String msg, InetAddress address, int port) {
		msg += "/e/"; // marking the end of the message
		Send(msg.getBytes(), address, port);
	}
}
